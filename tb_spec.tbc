# Ensures it's only included once (this is a source file, but just for completeness' sake).
only !tb_spec;
macro tb_spec;

use "header.tbh";
macro TB_INCLUDE = 1;

# At least three types; u8, ul and l; plus any other unsigned type, if supported (u16, u32, etc.).
# l and ul are the largest types available, every other type should fit within (including pointers).

# Function pointer types can be formed with parentheses: "long(long, u8 **) func_ptr = main;"

# 0 is the standard success code, while -1 or other negative values are reserved for error codes. All
# functions must return a value.

# All local variable declarations must be done at the beginning of the function, and assigned values must
# be arguments or precomputable constants.

# For conditions, statements must use "ifz", "ifnz", "ifp" or "ifnp", as relational operators like ==, <>,
# >, <=, < or >= are not available. This applies to while loops too (but with "wh-" instead of "if-").
# NOTE: z stands for zero, and p for positive (0 is also counted as positive, could be called non-negative).

# For loops just straight out don't exist. "const" protection doesn't, either.

# Addition, subtraction, and-ing, or-ing and xor-ing must be supported by all architectures, alongside the
# prefix operators <, >, << and >>, for 1-bit shifts and rotates, respectively. Multiplication, division
# and modulus may not be supported, in said cases, a call to __mul_TYPE1_TYPE2 or similar will be performed
# automatically.

# Supported l-value operators are ++ and --, both prefix and postfix, and @[], though just postfix.

# x[y] will return the value at address x + y, in whichever dereferencing type x has, while the l-value
# operator x@[y] will either pre-decrement or post-increment x before returning the value at just x,
# depending on y's sign.

# Identifiers are maximum 11 characters long, and string immediates 40 characters long.

# Labels can be defined by prefixing : to a label name, for example, ":foo goto foo;" makes an infinite
# loop.

ul mcopy(u8 *d, u8 *s, ul c)
: (ul c2) @(
  ifz (d) 0@;
  ifz (s) 0@;
  c2 = c;
  whnz (c@-) d@[1] = s@[1];
  give c2;
)

u8 *mcopy(u8 *d, u8 *s, ul c) @(
  ifz (d) -1@;
  ifz (s) -1@;
  whnz (c@-) d[c] = s[c];
  d@;
)

# Types:
# ul, l, u8, u16, u32, u64

# Keywords:
# ifz, ifnz, ifp, ifnp, whz, whnz, whp, whnp, else,
# break, next, once, use, macro, goto

# Symbols: ()[]:;,<>!@%&/=^*+-"'
# ( ) [ ] / \ @( @[ : ; , < << > >> ! & ^ % * + - ++ -- = " '

# ~ -> !
# | -> \
# # -> #
# { -> @(
# return x; -> x @;
